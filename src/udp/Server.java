/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package udp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;

/**
 *
 * @author n18dc
 */
public class Server extends javax.swing.JFrame {

    static final int PORT = 1234;
    private DatagramSocket socket = null;
    /**
     * Creates new form Server
     */
    public Server() throws IOException {
        initComponents();
        socket = new DatagramSocket(PORT);
        System.out.println("Server đang chạy");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnText = new javax.swing.JButton();
        txtKey = new javax.swing.JTextField();
        txtResult = new javax.swing.JTextField();
        btnBinary = new javax.swing.JButton();
        btnListen = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("KEY");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("RESULT");

        btnText.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnText.setForeground(new java.awt.Color(255, 0, 51));
        btnText.setText("TEXT");
        btnText.setFocusable(false);
        btnText.setInheritsPopupMenu(true);
        btnText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTextActionPerformed(evt);
            }
        });

        txtKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtKey.setText("1234");

        txtResult.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnBinary.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBinary.setForeground(new java.awt.Color(255, 51, 0));
        btnBinary.setText("BINARY");
        btnBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinaryActionPerformed(evt);
            }
        });

        btnListen.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnListen.setForeground(new java.awt.Color(255, 51, 51));
        btnListen.setText("LISTENING");
        btnListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListenActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("SERVER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnListen)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtKey)
                                            .addComponent(txtResult)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                                        .addComponent(btnBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnListen, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtResult, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnText, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTextActionPerformed
        // TODO add your handling code here:
        try {
            byte[] receiveData = new byte[1024];
            byte[] receiveData1 = new byte[1024];
            byte[] sendData = new byte[1024];

            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
            socket.receive(receivePacket);
            DatagramPacket receivePacket1 = new DatagramPacket(receiveData1, receiveData1.length);
            socket.receive(receivePacket1);

            String content = new String(receivePacket.getData());
            String path = new String(receivePacket1.getData()).trim();

            // lấy địa chỉ IP và số hiệu cồng bên gửi
            InetAddress IPAddress = receivePacket.getAddress();
            int port = receivePacket.getPort();

            System.out.println("path: " + path);
            System.out.println("content: " + content);

            //Kiểm tra đường dẫn - tạo file
            FileCheck(path);

            //Mã hóa
            String tam[] = content.split(" ");
            String mahoa = "";
            for (String string : tam) {
                mahoa += Encrypted(string, txtKey.getText()) + " ";
            }
            System.out.println("Mã hóa được là: " + mahoa);
            // ghi file văn bản
            textWrite(path, mahoa);
            //đọc từ file
            String str = textRead(path);
            System.out.println("Nội dung file đọc được là: " + str);
            //Giải mã
            String[] temp = str.trim().split(" ");
            String arrInt = "";
            for (String string : temp) {
                arrInt += Decrypted(string, txtKey.getText()) + " ";
            }
            System.out.println("Kết quả giải mã là: " + arrInt);
            //Tìm SNT
            String[] temp2 = arrInt.split(" ");
            String arrSNT = "";
            for (String string : temp2) {
                if (checkSNT(Integer.parseInt(string))) {
                    arrSNT += string + " ";
                }
            }
            //Kết quả hiện lên
            txtResult.setText(arrSNT);
            // gửi kết quả về cho client
            sendData = arrSNT.getBytes();
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
            //Gửi gói tin đi
            socket.send(sendPacket);
        }catch (IOException ex) {
            System.out.println("Đã xảy ra lỗi!");
        }
    }//GEN-LAST:event_btnTextActionPerformed

    private void btnBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinaryActionPerformed
        try {
            byte[] receiveData = new byte[1024];
            byte[] receiveData1 = new byte[1024];
            byte[] sendData = new byte[1024];

            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
            socket.receive(receivePacket);
            DatagramPacket receivePacket1 = new DatagramPacket(receiveData1, receiveData1.length);
            socket.receive(receivePacket1);

            String content = new String(receivePacket.getData());
            String path = new String(receivePacket1.getData()).trim();

            // lấy địa chỉ IP và số hiệu cồng bên gửi
            InetAddress IPAddress = receivePacket.getAddress();
            int port = receivePacket.getPort();

            System.out.println("path: " + path);
            System.out.println("content: " + content);

            //Kiểm tra đường dẫn - tạo file
            FileCheck(path);

            //Mã hóa
            String tam[] = content.split(" ");
            String mahoa = "";
            for (String string : tam) {
                mahoa += Encrypted(string, txtKey.getText()) + " ";
            }
            System.out.println("Mã hóa được là: " + mahoa);
            // ghi file văn bản
            binaryWrite(path, mahoa);
            //đọc từ file
            String str = binaryRead(path);
            System.out.println("Nội dung file đọc được là: " + str);
            //Giải mã
            String[] temp = str.trim().split(" ");
            String arrInt = "";
            for (String string : temp) {
                arrInt += Decrypted(string, txtKey.getText()) + " ";
            }
            System.out.println("Kết quả giải mã là: " + arrInt);
            //Tìm SNT
            String[] temp2 = arrInt.split(" ");
            String arrSNT = "";
            for (String string : temp2) {
                if (checkSNT(Integer.parseInt(string))) {
                    arrSNT += string + " ";
                }
            }
            //Kết quả hiện lên
            txtResult.setText(arrSNT);
            // gửi kết quả về cho client
            sendData = arrSNT.getBytes();
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
            //Gửi gói tin đi
            socket.send(sendPacket);
        }catch (IOException ex) {
            System.out.println("Đã xảy ra lỗi!");
        }
    }//GEN-LAST:event_btnBinaryActionPerformed

    private void btnListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListenActionPerformed
        // TODO add your handling code here:
        try {
            byte[] receiveData = new byte[1024];
            byte[] sendData = new byte[1024];

            DatagramPacket receivePacket1 = new DatagramPacket(receiveData, receiveData.length);
            socket.receive(receivePacket1);

            String content = new String(receivePacket1.getData()).trim();

            // lấy địa chỉ IP và số hiệu cồng bên gửi
            InetAddress IPAddress = receivePacket1.getAddress();
            int port = receivePacket1.getPort();

            System.out.println("content: " + content);
            if(content.equals("REQUEST"))
            {
            // gửi kết quả về cho client
            sendData = "ACCEPT".getBytes();
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
            //Gửi gói tin đi
            socket.send(sendPacket);
            }
        } catch (IOException ex) {
            System.out.println("Đã xảy ra lỗi!");
        }
    }//GEN-LAST:event_btnListenActionPerformed
    private boolean checkSNT(int n) {
        // so nguyen n < 2 khong phai la so nguyen to
        if (n < 2) {
            return false;
        }
        // check so nguyen to khi n >= 2
        int squareRoot = (int) Math.sqrt(n);
        for (int i = 2; i <= squareRoot; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    private void FileCheck(String addr) throws IOException {
        File f = new File(addr);

        if (f.exists()) {
            System.out.println("File đã tồn tại");
        } else {
            f.createNewFile();
            System.out.println("File đã được tạo mới!");
        }
    }

    private String Encrypted(String plaintext, String keyword) throws IOException {
        String res = "";

        for (int i = 0, j = 0; i < plaintext.length(); i++) {
            char c = plaintext.charAt(i);
            if (c < '0' || c > '9') {
                continue;
            }
            res += (char) ((c + keyword.charAt(j) - 2*'0') % 10 + '0');
            j = ++j % keyword.length();
        }
        return res;
    }

    private String Decrypted(String ciphertext, String keyword) throws IOException {
        String res = "";

        for (int i = 0, j = 0; i < ciphertext.length(); i++) {
            char c = ciphertext.charAt(i);
            if (c < '0' || c > '9') {
                continue;
            }
            res += (char) ((c - keyword.charAt(j) + 10) % 10 + '0');
            j = ++j % keyword.length();
        }
        return res;
    }

    private DatagramPacket receive() throws IOException {
        socket = new DatagramSocket(PORT);
        byte[] buffer = new byte[65507];
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
        socket.receive(packet);
        return packet;
    }

    public void binaryWrite(String path, String content) throws IOException {

        File file = new File(path);
        if (!file.exists()) {
            file.createNewFile();
            System.out.println("Đã tạo file nhị phân mới!");
        }
        try {

            byte[] data = content.getBytes();
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(data, 0, data.length);
            fos.flush();
            fos.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public String binaryRead(String path) throws IOException {
        File file = new File(path);
        FileInputStream fis = null;
        String content = "";
        byte[] data = new byte[2048];
        int length;
        try {

            fis = new FileInputStream(file);
            length = fis.read(data, 0, 2048);
            content = new String(data, 0, length);

            fis.close();

        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return content;
    }

    public void textWrite(String path, String content) throws IOException {
        File file = new File(path);
        if (!file.exists()) {
            file.createNewFile();
            System.out.println("Đã tạo file bản mới!");
        }
        try {
            FileWriter writer = new FileWriter(file);
            BufferedWriter buffer = new BufferedWriter(writer);
            buffer.write(content);
            buffer.close();
        } catch (Exception ex) {
            System.out.println("Loi ghi file: " + ex);
        }

    }

    public String textRead(String path) throws IOException {
        String line = "";

        try {
            File f = new File(path);
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            line = br.readLine();
            fr.close();
            br.close();
        } catch (Exception ex) {
            System.out.println("Loi doc file: " + ex);
        }
        return line;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Server().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBinary;
    private javax.swing.JButton btnListen;
    private javax.swing.JButton btnText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtResult;
    // End of variables declaration//GEN-END:variables
}
